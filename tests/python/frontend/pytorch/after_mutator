fn (%input: Tensor[(1, 5, 10), float32], %lstm.weight_ih_l0: Tensor[(40, 10), float32], %lstm.weight_hh_l0: Tensor[(40, 10), float32], %lstm.bias_ih_l0: Tensor[(40), float32], %lstm.bias_hh_l0: Tensor[(40), float32], %linear.weight: Tensor[(10, 20), float32], %linear.bias: Tensor[(10), float32]) {
  %0 = split(%input, indices_or_sections=1);
  %1 = %0.0;
  %2 = squeeze(%1, axis=[0]);
  %3 = (%2,);
  %4 = full(0, shape=[1, 5, 10], dtype="float32");
  %5 = split(%4, indices_or_sections=1);
  %6 = %5.0;
  %7 = squeeze(%6, axis=[0]);
  %8 = (%7,);
  %9 = %3.0;
  %10 = %8.0;
  %11 = (%9, %10);
  %12 = (%lstm.weight_ih_l0, %lstm.weight_hh_l0);
  %13 = concatenate(%11, axis=1);
  %14 = concatenate(%12, axis=1);
  %15 = nn.dense(%13, %14, units=None);
  %16 = add(%15, %lstm.bias_ih_l0);
  %17 = add(%16, %lstm.bias_hh_l0);
  %18 = split(%17, indices_or_sections=4, axis=-1);
  %19 = %18.3;
  %20 = %18.1;
  %21 = full(0, shape=[1, 5, 10], dtype="float32");
  %22 = split(%21, indices_or_sections=1);
  %23 = %22.0;
  %24 = squeeze(%23, axis=[0]);
  %25 = (%24,);
  %26 = sigmoid(%20);
  %27 = %25.0;
  %28 = %18.0;
  %29 = %18.2;
  %30 = sigmoid(%28);
  %31 = tanh(%29);
  %32 = multiply(%26, %27);
  %33 = multiply(%30, %31);
  %34 = add(%32, %33);
  %35 = sigmoid(%19);
  %36 = tanh(%34);
  %37 = multiply(%35, %36);
  %38 = (%37,);
  %39 = stack(%38);
  %40 = split(%input, indices_or_sections=1);
  %41 = %40.0;
  %42 = squeeze(%41, axis=[0]);
  %43 = (%42,);
  %44 = full(0, shape=[1, 5, 10], dtype="float32");
  %45 = split(%44, indices_or_sections=1);
  %46 = %45.0;
  %47 = squeeze(%46, axis=[0]);
  %48 = (%47,);
  %49 = %43.0;
  %50 = %48.0;
  %51 = (%49, %50);
  %52 = (%lstm.weight_ih_l0, %lstm.weight_hh_l0);
  %53 = concatenate(%51, axis=1);
  %54 = concatenate(%52, axis=1);
  %55 = nn.dense(%53, %54, units=None);
  %56 = add(%55, %lstm.bias_ih_l0);
  %57 = add(%56, %lstm.bias_hh_l0);
  %58 = split(%57, indices_or_sections=4, axis=-1);
  %59 = %58.1;
  %60 = full(0, shape=[1, 5, 10], dtype="float32");
  %61 = split(%60, indices_or_sections=1);
  %62 = %61.0;
  %63 = squeeze(%62, axis=[0]);
  %64 = (%63,);
  %65 = sigmoid(%59);
  %66 = %64.0;
  %67 = %58.0;
  %68 = %58.2;
  %69 = sigmoid(%67);
  %70 = tanh(%68);
  %71 = multiply(%65, %66);
  %72 = multiply(%69, %70);
  %73 = add(%71, %72);
  %74 = (%73,);
  %75 = stack(%74);
  %76 = take(%39, -1, axis=0, mode="wrap");
  %77 = take(%75, -1, axis=0, mode="wrap");
  %78 = (%76, %77);
  %79 = concatenate(%78, axis=1);
  %80 = nn.dense(%79, %linear.weight, units=None);
  %81 = nn.bias_add(%80, %linear.bias, axis=-1);
  nn.log_softmax(%81)
}
