fn (%input: Tensor[(1, 5, 10), float32], %lstm.weight_ih_l0: Tensor[(40, 10), float32], %lstm.weight_hh_l0: Tensor[(40, 10), float32], %lstm.bias_ih_l0: Tensor[(40), float32], %lstm.bias_hh_l0: Tensor[(40), float32], %linear.weight: Tensor[(10, 20), float32], %linear.bias: Tensor[(10), float32]) {
  %0 = split(%input, indices_or_sections=1);
  %1 = %0.0;
  %2 = squeeze(%1, axis=[0]);
  %3 = (%2,);
  %4 = full(0, shape=[1, 5, 10], dtype="float32");
  %5 = split(%4, indices_or_sections=1);
  %6 = %5.0;
  %7 = squeeze(%6, axis=[0]);
  %8 = (%7,);
  %9 = %3.0;
  %10 = %8.0;
  %11 = (%9, %10);
  %12 = (%lstm.weight_ih_l0, %lstm.weight_hh_l0);
  %13 = concatenate(%11, axis=1);
  %14 = concatenate(%12, axis=1);
  %15 = nn.dense(%13, %14, units=None);
  %16 = add(%15, %lstm.bias_ih_l0);
  %17 = add(%16, %lstm.bias_hh_l0);
  %18 = split(%17, indices_or_sections=4, axis=-1);
  %19 = %18.3;
  %20 = %18.1;
  %21 = full(0, shape=[1, 5, 10], dtype="float32");
  %22 = split(%21, indices_or_sections=1);
  %23 = %22.0;
  %24 = squeeze(%23, axis=[0]);
  %25 = (%24,);
  %26 = sigmoid(%20);
  %27 = %25.0;
  %28 = %18.0;
  %29 = %18.2;
  %30 = sigmoid(%28);
  %31 = tanh(%29);
  %32 = multiply(%26, %27);
  %33 = multiply(%30, %31);
  %34 = add(%32, %33);
  %35 = sigmoid(%19);
  %36 = tanh(%34);
  %37 = multiply(%35, %36);
  %38 = (%37,);
  %39 = stack(%38);
  %40 = (%34,);
  %41 = stack(%40);
  %42 = take(%39, -1, axis=0, mode="wrap");
  %43 = take(%41, -1, axis=0, mode="wrap");
  %44 = (%42, %43);
  %45 = concatenate(%44, axis=1);
  %46 = nn.dense(%45, %linear.weight, units=None);
  %47 = nn.bias_add(%46, %linear.bias, axis=-1);
  nn.log_softmax(%47)
}
